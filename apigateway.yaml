openapi: "3.0.1"
info:
  title: "AI Photo Search"
  description: "AI Photo Search application, built during the Cloud and Big Data course\
    \ at New York University."
  version: "1.0.0"
servers:
- url: "https://7z1q6hpgd5.execute-api.us-east-1.amazonaws.com/{basePath}"
  variables:
    basePath:
      default: "testing"
paths:
  /search:
    get:
      operationId: "searchPhotos"
      parameters:
      - name: "q"
        in: "query"
        required: true
        schema:
          type: "string"
      responses:
        "500":
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchResponse"
        "403":
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:339712725968:function:search-photos/invocations"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.q: "method.request.querystring.q"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /upload:
    put:
      operationId: "uploadPhoto"
      parameters:
      - name: "x-amz-meta-customlabels"
        in: "header"
        required: true
        schema:
          type: "string"
      - name: "name"
        in: "query"
        required: true
        schema:
          type: "string"
      responses:
        "500":
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MODEL575b17"
        "403":
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::339712725968:role/APIGatewayS3ProxyPolicy"
        httpMethod: "PUT"
        uri: "arn:aws:apigateway:us-east-1:s3:path/{bucket}/{key}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.key: "method.request.querystring.name"
          integration.request.header.x-amz-meta-customlabels: "method.request.header.x-amz-meta-customlabels"
          integration.request.path.bucket: "'photos-cc-a3'"
        passthroughBehavior: "when_no_templates"
        contentHandling: "CONVERT_TO_BINARY"
        type: "aws"
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,x-amz-meta-customlabels'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
components:
  schemas:
    MODEL575b17:
      type: "object"
    Error:
      type: "object"
      properties:
        code:
          type: "integer"
          format: "int32"
        message:
          type: "string"
    Photo:
      type: "object"
      properties:
        url:
          type: "string"
        labels:
          type: "array"
          items:
            type: "string"
    SearchResponse:
      type: "object"
      properties:
        results:
          type: "array"
          items:
            $ref: "#/components/schemas/Photo"
  securitySchemes:
    api_key:
      type: "apiKey"
      name: "x-api-key"
      in: "header"
x-amazon-apigateway-gateway-responses:
  DEFAULT_4XX:
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
      gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
      gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,x-amz-meta-customlabels'"
  DEFAULT_5XX:
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
      gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
      gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,x-amz-meta-customlabels'"
x-amazon-apigateway-binary-media-types:
- "image/png"
- "image/jpeg"
- "image/jpg"
